// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/service.go

// Package mock_service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDisputeService is a mock of DisputeService interface
type MockDisputeService struct {
	ctrl     *gomock.Controller
	recorder *MockDisputeServiceMockRecorder
}

// MockDisputeServiceMockRecorder is the mock recorder for MockDisputeService
type MockDisputeServiceMockRecorder struct {
	mock *MockDisputeService
}

// NewMockDisputeService creates a new mock instance
func NewMockDisputeService(ctrl *gomock.Controller) *MockDisputeService {
	mock := &MockDisputeService{ctrl: ctrl}
	mock.recorder = &MockDisputeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisputeService) EXPECT() *MockDisputeServiceMockRecorder {
	return m.recorder
}

// Healthy mocks base method
func (m *MockDisputeService) Healthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy
func (mr *MockDisputeServiceMockRecorder) Healthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockDisputeService)(nil).Healthy))
}
